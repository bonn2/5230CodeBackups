// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5230.orangebrains;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveRfrontmotor;
    public static SpeedController driveRrearmotor;
    public static SpeedController driveLfrontmotor;
    public static SpeedController driveLrearmotor;
    public static RobotDrive driveRobotDrive41;
    public static DoubleSolenoid catapultDoubleSolenoid1;
    public static DoubleSolenoid catapultDoubleSolenoid2;
    public static SpeedController armliftupdownmotor;//raises arm for stuffs
    public static DoubleSolenoid armclimbupdownsol;//extend arm to scale
    public static SpeedController intakewheelsliftmoving;
    public static SpeedController winchpullsin;
    public static SpeedController winchreleases;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveRfrontmotor = new Talon(2);
        LiveWindow.addActuator("Drive", "Rfrontmotor", (Talon) driveRfrontmotor);
        
        driveRrearmotor = new Talon(1);
        LiveWindow.addActuator("Drive", "Rrearmotor", (Talon) driveRrearmotor);
        
        driveLfrontmotor = new Talon(4);
        LiveWindow.addActuator("Drive", "Lfrontmotor", (Talon) driveLfrontmotor);
        
        driveLrearmotor = new Talon(3);
        LiveWindow.addActuator("Drive", "Lrearmotor", (Talon) driveLrearmotor);
        
        driveRobotDrive41 = new RobotDrive(driveLfrontmotor, driveLrearmotor,
              driveRfrontmotor, driveRrearmotor);
        
        driveRobotDrive41.setSafetyEnabled(false);
        driveRobotDrive41.setExpiration(0.1);
        driveRobotDrive41.setSensitivity(0.5);
        driveRobotDrive41.setMaxOutput(1.0);
        driveRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        driveRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        catapultDoubleSolenoid1 = new DoubleSolenoid(0, 5, 6);
        LiveWindow.addActuator("catapult", "Double Solenoid 1", catapultDoubleSolenoid1);
        
        catapultDoubleSolenoid2 = new DoubleSolenoid(0, 0, 7);
        LiveWindow.addActuator("catapult", "Double Solenoid 2", catapultDoubleSolenoid2);
        
        armliftupdownmotor = new Talon(8);
        LiveWindow.addActuator("arm lift", "up down motor", (Talon) armliftupdownmotor);
        
        armclimbupdownsol = new DoubleSolenoid(0, 1, 2);
        LiveWindow.addActuator("arm climb", "updownsol", armclimbupdownsol);
        
        intakewheelsliftmoving = new Talon(5);
        LiveWindow.addActuator("Intake wheels", "lift moving", (Talon) intakewheelsliftmoving);
        
        winchpullsin = new Talon(7);
        LiveWindow.addActuator("Winch", "pulls in", (Talon) winchpullsin);
        
        winchreleases = new Talon(6);
        LiveWindow.addActuator("Winch", "releases", (Talon) winchreleases);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
