// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.Picasso;

import org.usfirst.frc0.Picasso.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc0.Picasso.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton lBumper;
    public JoystickButton rBumper;
    public JoystickButton a;
    public JoystickButton y;
    public JoystickButton back;
    public Joystick xbox;
    public JoystickButton gearRBump;
    public JoystickButton shootLBump;
    public JoystickButton resetB;
    public JoystickButton aShake;
    public JoystickButton x;
    public JoystickButton ydos;
    public Joystick xboxDos;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public double SpeedVar;
    public double Timer;
    
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        xboxDos = new Joystick(1);
        
        ydos = new JoystickButton(xboxDos, 4);
        ydos.whenPressed(new camUp());
        x = new JoystickButton(xboxDos, 3);
        x.whenPressed(new camDown());
        aShake = new JoystickButton(xboxDos, 1);
        aShake.whileHeld(new airShake());
        resetB = new JoystickButton(xboxDos, 2);
        resetB.whenPressed(new gearReturn());
        shootLBump = new JoystickButton(xboxDos, 5);
        shootLBump.whileHeld(new ballShoot());
        gearRBump = new JoystickButton(xboxDos, 6);
        gearRBump.whenPressed(new releaseGear());
        xbox = new Joystick(0);
        
        back = new JoystickButton(xbox, 7);
        back.whileHeld(new goDown());
        y = new JoystickButton(xbox, 4);
        y.whenPressed(new fastSpeed());
        a = new JoystickButton(xbox, 1);
        a.whenPressed(new slowSpeed());
        rBumper = new JoystickButton(xbox, 6);
        rBumper.whileHeld(new ballIntake());
        lBumper = new JoystickButton(xbox, 5);
        lBumper.whileHeld(new climbUp());


        // SmartDashboard Buttons
        SmartDashboard.putData("joystickDrive", new joystickDrive());
        SmartDashboard.putData("climbUp", new climbUp());
        SmartDashboard.putData("releaseGear", new releaseGear());
        SmartDashboard.putData("ballIntake", new ballIntake());
        SmartDashboard.putData("ballShoot", new ballShoot());
        SmartDashboard.putData("fastSpeed", new fastSpeed());
        SmartDashboard.putData("slowSpeed", new slowSpeed());
        SmartDashboard.putData("gearReturn", new gearReturn());
        SmartDashboard.putData("airShake", new airShake());
        SmartDashboard.putData("AutonCode", new AutonCode());
        SmartDashboard.putData("forward", new forward());
        SmartDashboard.putData("backward", new backward());
        SmartDashboard.putData("left", new left());
        SmartDashboard.putData("right", new right());
        SmartDashboard.putData("stop", new stop());
        SmartDashboard.putData("goDown", new goDown());
        SmartDashboard.putData("camUp", new camUp());
        SmartDashboard.putData("camDown", new camDown());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getXbox() {
        return xbox;
    }

    public Joystick getxboxDos() {
        return xboxDos;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS\
    public double getSpeedVar() {
        return SpeedVar;
    }
    
    public double getTimer() {
    	Timer = Timer+1;
    	return Timer;
    }
}

